# -*- coding: utf-8 -*-
"""AI_for_Life_Prediction_of_CNC_Tools.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZeZT4YET_p-evgqgRU_fgBxgj3a6YDJR
"""

!pip install pandas

import pandas as pd
print(pd.__version__)

"""# Import datasheet (csv)


"""

from google.colab import files
uploaded1= files.upload()

import io
df1= pd.read_csv(io.BytesIO(uploaded1['datasheet.csv']))
print(df1)

"""# Total working Duration of all tools"""

df=pd.DataFrame(df1)
df['On Time']= pd.to_datetime(df['On Time'])
df['Off Time']= pd.to_datetime(df['Off Time'])

df['Duration']= df['Off Time']-df['On Time']
total_time = df['Duration'].sum()

print(f"Total Time: {total_time}")
remaining_useful_life = pd.Timedelta(days=100) - total_time

print(f"Total Remaining Useful Life: {remaining_useful_life}")

"""#Initial Condition"""

df=df.sort_values(by='On Time')
total_time_tool1 = pd.Timedelta(0)
total_time_tool2 = pd.Timedelta(0)
total_time_tool3 = pd.Timedelta(0)
total_time_tool4 = pd.Timedelta(0)
total_time_tool5 = pd.Timedelta(0)
total_time_tool6 = pd.Timedelta(0)

for index, row in df.iterrows():
  if (row["Tool"] == 'Tool 1') and (row["Current value"] < 0.5):
    total_time_tool1 += row['Off Time'] - row['On Time']
  if (row["Tool"] == 'Tool 2') and (row["Current value"] < 0.5):
    total_time_tool2 += row['Off Time'] - row['On Time']
  if (row["Tool"] == 'Tool 3') and (row["Current value"] < 0.5):
    total_time_tool3 += row['Off Time'] - row['On Time']
  if (row["Tool"] == 'Tool 4') and (row["Current value"] < 0.5):
    total_time_tool4 += row['Off Time'] - row['On Time']
  if (row["Tool"] == 'Tool 5') and (row["Current value"] < 0.5):
    total_time_tool5 += row['Off Time'] - row['On Time']
  if (row["Tool"] == 'Tool 6') and (row["Current value"] < 0.5):
    total_time_tool6 += row['Off Time'] - row['On Time']

print(f"Tool 1- Initial Condition: {total_time_tool1}")
print(f"Tool 2- Initial Condition: {total_time_tool2}")
print(f"Tool 3- Initial Condition: {total_time_tool3}")
print(f"Tool 4- Initial Condition: {total_time_tool4}")
print(f"Tool 5- Initial Condition: {total_time_tool5}")
print(f"Tool 6- Initial Condition: {total_time_tool6}")

"""# Rotating but not cutting Condition"""

df=df.sort_values(by='On Time')
total_time_tool11 = pd.Timedelta(0)
total_time_tool22 = pd.Timedelta(0)
total_time_tool33 = pd.Timedelta(0)
total_time_tool44 = pd.Timedelta(0)
total_time_tool55 = pd.Timedelta(0)
total_time_tool66 = pd.Timedelta(0)

for index, row in df.iterrows():
  if (row["Tool"] == 'Tool 1') and (row["Current value"] >= 0.5) and (row["Current value"] <= 0.9):
    total_time_tool11 += row['Off Time'] - row['On Time']
  if (row["Tool"] == 'Tool 2') and (row["Current value"] >= 0.5) and (row["Current value"] <= 0.9):
    total_time_tool22 += row['Off Time'] - row['On Time']
  if (row["Tool"] == 'Tool 3') and (row["Current value"] >= 0.5) and (row["Current value"] <= 0.9):
    total_time_tool33 += row['Off Time'] - row['On Time']
  if (row["Tool"] == 'Tool 4') and (row["Current value"] >= 0.5) and (row["Current value"] <= 0.9):
    total_time_tool44 += row['Off Time'] - row['On Time']
  if (row["Tool"] == 'Tool 5') and (row["Current value"] >= 0.5) and (row["Current value"] <= 0.9):
    total_time_tool55 += row['Off Time'] - row['On Time']
  if (row["Tool"] == 'Tool 6') and (row["Current value"] >= 0.5) and (row["Current value"] <= 0.9):
    total_time_tool66 += row['Off Time'] - row['On Time']

print(f"Tool 1- Rotating Condition: {total_time_tool11}")
print(f"Tool 2- Rotating Condition: {total_time_tool22}")
print(f"Tool 3- Rotating Condition: {total_time_tool33}")
print(f"Tool 4- Rotating Condition: {total_time_tool44}")
print(f"Tool 5- Rotating Condition: {total_time_tool55}")
print(f"Tool 6- Rotating Condition: {total_time_tool66}")

"""# Ideal Condition"""

df=df.sort_values(by='On Time')
total_time_tool111 = pd.Timedelta(0)
total_time_tool222 = pd.Timedelta(0)
total_time_tool333 = pd.Timedelta(0)
total_time_tool444 = pd.Timedelta(0)
total_time_tool555 = pd.Timedelta(0)
total_time_tool666 = pd.Timedelta(0)

for index, row in df.iterrows():
  if (row["Tool"] == 'Tool 1') and (row["Current value"] > 1.0) and (row["Current value"] <= 1.5):
    total_time_tool111 += row['Off Time'] - row['On Time']
  if (row["Tool"] == 'Tool 2') and (row["Current value"] > 1.0) and (row["Current value"] <= 1.5):
    total_time_tool222 += row['Off Time'] - row['On Time']
  if (row["Tool"] == 'Tool 3') and (row["Current value"] > 1.0) and (row["Current value"] <= 1.5):
    total_time_tool333 += row['Off Time'] - row['On Time']
  if (row["Tool"] == 'Tool 4') and (row["Current value"] > 1.0) and (row["Current value"] <= 1.5):
    total_time_tool444 += row['Off Time'] - row['On Time']
  if (row["Tool"] == 'Tool 5') and (row["Current value"] > 1.0) and (row["Current value"] <= 1.5):
    total_time_tool555 += row['Off Time'] - row['On Time']
  if (row["Tool"] == 'Tool 6') and (row["Current value"] > 1.0) and (row["Current value"] <= 1.5):
    total_time_tool666 += row['Off Time'] - row['On Time']

print(f"Tool 1- Ideal Condition: {total_time_tool111}")
print(f"Tool 2- Ideal Condition: {total_time_tool222}")
print(f"Tool 3- Ideal Condition: {total_time_tool333}")
print(f"Tool 4- Ideal Condition: {total_time_tool444}")
print(f"Tool 5- Ideal Condition: {total_time_tool555}")
print(f"Tool 6- Ideal Condition: {total_time_tool666}")

tool1_total_time= total_time_tool1+total_time_tool11+total_time_tool111
print(f"Total Time Tool 1: {tool1_total_time}")

tool2_total_time= total_time_tool2+total_time_tool22+total_time_tool222
print(f"Total Time Tool 2: {tool2_total_time}")

tool3_total_time= total_time_tool3+total_time_tool33+total_time_tool333
print(f"Total Time Tool 3: {tool3_total_time}")

tool4_total_time= total_time_tool4+total_time_tool44+total_time_tool444
print(f"Total Time Tool 4: {tool4_total_time}")

tool5_total_time= total_time_tool5+total_time_tool55+total_time_tool555
print(f"Total Time Tool 5: {tool5_total_time}")

tool6_total_time= total_time_tool6+total_time_tool66+total_time_tool666
print(f"Total Time Tool 6: {tool6_total_time}")

"""# Firebase Admin Installation"""

pip install firebase-admin

pip install --upgrade requests

pip install requests==2.25.1

"""# Sending Calculated data to Firebase Realtime Database"""

import firebase_admin
from firebase_admin import credentials, db

from google.colab import files
uploaded = files.upload()
file_name = next(iter(uploaded))
cred = credentials.Certificate(file_name)
#cred = credentials.Certificate("D:\CSV\ServiceAccountKey.json")


#firebase_admin.initialize_app,(cred, {
#    'databaseURL':'https://cnc-tools-c36c1-default-rtdb.asia-southeast1.firebasedatabase.app'})
try:
    firebase_admin.initialize_app(cred, {
        'databaseURL': 'https://cnc-tools-c36c1-default-rtdb.asia-southeast1.firebasedatabase.app'
    })
    print("Firebase Admin SDK initialized successfully.")
except Exception as e:
    print("Error initializing Firebase Admin SDK:", e)

# Calculate total life (assumed to be 100 days)
total_life = pd.Timedelta(days=100)

# Calculate used life for each tool
used_life_tool1 = total_time_tool1 + total_time_tool11 + total_time_tool111
used_life_tool2 = total_time_tool2 + total_time_tool22 + total_time_tool222
used_life_tool3 = total_time_tool3 + total_time_tool33 + total_time_tool333
used_life_tool4 = total_time_tool4 + total_time_tool44 + total_time_tool444
used_life_tool5 = total_time_tool5 + total_time_tool55 + total_time_tool555
used_life_tool6 = total_time_tool6 + total_time_tool66 + total_time_tool666

# Calculate remaining useful life (RUL) for each tool
rul_tool1 = total_life - used_life_tool1
rul_tool2 = total_life - used_life_tool2
rul_tool3 = total_life - used_life_tool3
rul_tool4 = total_life - used_life_tool4
rul_tool5 = total_life - used_life_tool5
rul_tool6 = total_life - used_life_tool6

# Prepare data to send to Firebase
tool_data = {
    'Tool 1': {
        'total_life': str(total_life),
        'used_life': str(used_life_tool1),
        'RUL': str(rul_tool1)
    },
    'Tool 2': {
        'total_life': str(total_life),
        'used_life': str(used_life_tool2),
        'RUL': str(rul_tool2)
    },
    'Tool 3': {
        'total_life': str(total_life),
        'used_life': str(used_life_tool3),
        'RUL': str(rul_tool3)
    },
    'Tool 4': {
        'total_life': str(total_life),
        'used_life': str(used_life_tool4),
        'RUL': str(rul_tool4)
    },
    'Tool 5': {
        'total_life': str(total_life),
        'used_life': str(used_life_tool5),
        'RUL': str(rul_tool5)
    },
    'Tool 6': {
        'total_life': str(total_life),
        'used_life': str(used_life_tool6),
        'RUL': str(rul_tool6)
    }
}

for tool,data in tool_data.items():
  ref = db.reference('/tools')
  ref.set(tool_data)

print("Data successfully pushed to Firebase.")

import collections
import collections.abc

if hasattr(collections.abc, 'MutableMapping'):
    print("MutableMapping is available.")
else:
    print("MutableMapping is not available.")

from collections.abc import MutableMapping
import http.cookiejar

class RequestsCookieJar(http.cookiejar.CookieJar, MutableMapping):
    """Compatibility class; is a http.cookiejar.CookieJar, but exposes a dict interface."""
    pass
